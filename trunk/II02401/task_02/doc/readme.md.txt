<p align="center"> Министерство образования Республики Беларусь</p>
<p align="center">Учреждение образования</p>
<p align="center">“Брестский Государственный технический университет”</p>
<p align="center">Кафедра ИИТ</p>
<br><br><br><br><br><br><br>
<p align="center">Лабораторная работа №2</p>
<p align="center">По дисциплине “Общая теория интеллектуальных систем”</p>
<p align="center">Тема: “ПИД-регуляторы”</p>
<br><br><br><br><br>
<p align="right">Выполнила:</p>
<p align="right">Студентка 2 курса</p>
<p align="right">Группы ИИ-24</p>
<p align="right">Алешко А. В.</p>
<p align="right">Проверил:</p>
<p align="right">Иванюк Д. С.</p>
<br><br><br><br><br>
<p align="center">Брест 2023</p>

---

# Общее задание #
1. Написать отчет по выполненной лабораторной работе №1 в .md формате (readme.md) и с помощью запроса на внесение изменений (**pull request**) разместить его в следующем каталоге: **trunk\ii0xxyy\task_02\doc** (где **xx** - номер группы, **yy** - номер студента, например **ii02102**).
2. Исходный код написанной программы разместить в каталоге: **trunk\ii0xxyy\task_02\src**.

# Задание #
На C++ реализовать программу, моделирующую рассмотренный выше ПИД-регулятор.  В качестве объекта управления использовать математическую модель, полученную в предыдущей работе.
В отчете также привести графики для разных заданий температуры объекта, пояснить полученные результаты.

---

# Выполнение задания #

Код программы:
```C++
#include <iostream>
#include <cmath>
using namespace std;
class NonlinearModel {
public:
    NonlinearModel(int time, double desiredTemp = 10)
        : time(time), desiredTemp(desiredTemp) {
        arrayOfE[0] = 0.001;
        arrayOfE[1] = 0.19;
        arrayOfE[2] = 0.00002;
        arrayOfQ[0] = 0.4;
        arrayOfQ[1] = 0.1;
        arrayOfQ[2] = 0.12;
        weight[0] = 1;
        weight[1] = 0;
        weight[2] = 1;
        weight[3] = 1.0;
        prevU = weight[3];
    }
    void calculateModel() {
        for (int i = 0; i < time; i++) {
            param[3] = sin(param[3]);
            double futureY = weight[0] * param[0] - weight[1] * param[1] * param[1] + weight[2] * param[2] + weight[3] * param[3];
            param[1] = param[0];
            param[0] = futureY;
            arrayOfE[2] = desiredTemp - futureY;
            futureY = weight[0] * param[0] - weight[1] * param[1] * param[1] + weight[2] * param[2] + weight[3] * param[3];
            param[1] = param[0];
            param[0] = futureY;
            arrayOfE[1] = desiredTemp - futureY;
            weight[2] = prevU + arrayOfQ[0] * arrayOfE[2] + arrayOfQ[1] * arrayOfE[1] + arrayOfQ[2] * arrayOfE[0];
            futureY = weight[0] * param[0] - weight[1] * param[1] * param[1] + weight[2] * param[2] + weight[3] * param[3];
            param[1] = param[0];
            param[0] = futureY;
            arrayOfE[0] = desiredTemp - futureY;
            result[i] = param[0];
        }
    }
    void printResults() {
        cout << "Y" << endl;
        for (int i = 0; i < time; i++) {
            cout << result[i] << endl;
        }
    }
private:
    int time;
    double desiredTemp;
    double arrayOfE[3];
    double arrayOfQ[3];
    double weight[4];
    double prevU;
    double param[4] = {1, 0, 1, 1.0};
    double result[200];
};
int main() {
    int size = 200;
    NonlinearModel model(size);
    model.calculateModel();
    model.printResults();
    return 0;
}


```     

Вывод программы:
Y
9.91965036353895
18.91229745090351
13.166325958801414
8.512768603819868
13.086519784532452
14.954741676715715
11.529650984681968
11.013315978618147
13.254586712898313
13.035365266494914
11.598890708367643
12.010124469472535
12.798251209715948
12.324609105960759
11.890495594234071
12.257940781078585
12.42611754814534
12.12721891017706
12.060449661044444
12.24317704643322
12.223915608482912
12.090728413660093
12.113064048296176
12.175172192011242
12.129973720970561
12.08382106918067
12.107372256882927
12.11695047882915
12.085684385061956
12.072986060632749
12.08293523695708
12.076568141496322
12.059807450190048
12.056252320225969
12.056888974910583
12.048568378387223
12.039926049606615
12.037453712090784
12.034174607731636
12.027448860947919
12.022303913440675
12.01930623394711
12.015097921816045
12.0100406347192
12.006190387485695
12.002850884380504
11.998847827398174
11.994874357919443
11.991519432671558
11.988200436056946
11.98465978891183
11.9813187723994
11.978241811825185
11.97513784598006
11.972022847217376
11.969073157098913
11.966233709235786
11.963398057741095
11.960619483111147
11.957949307692736
11.955337337473262
11.952757223731268
11.950242583080783
11.947798803411255
11.94539931487178
11.943042840761635
11.94074317629136
11.938494785051562
11.936286898639393
11.93412242306838
11.932004746404537
11.92992853246658
11.927890181424544
11.925891413164814
11.923931777349429
11.922008001507274
11.920118922110431
11.918264811454703
11.916444364722217
11.914655788829817
11.91289848668211
11.911171985582648
11.909475091139413
11.907806755548407
11.906166424627333
11.904553402535187
11.902966766398395
11.901405788821867
11.899869896895611
11.89835840828442
11.8968706131497
11.895405922792426
11.893963782412998
11.892543593183357
11.891144783347219
11.889766840678467
11.888409258160276
11.887071523577642
11.885753155073067
11.884453698565785
11.883172704219579
11.881909731997599
11.880664364292999
11.87943619844918
11.878224839234184
11.877029904250577
11.87585102658047
11.874687849808657
11.873540026537833
11.872407221056681
11.871289108900013
11.87018537447321
11.869095711127843
11.868019821971012
11.866957418976904
11.86590822203279
11.864871959114929
11.863848366285222
11.862837187030035
11.861838171883003
11.860851078429587
11.859875671067964
11.858911720600073
11.857959004035816
11.857017304477875
11.85608641087027
11.855166117742272
11.854256225056657
11.85335653805339
11.852466867042068
11.85158702722248
11.850716838545017
11.849856125556853
11.849004717237813
11.848162446859007
11.847329151853963
11.84650467368282
11.845688857699995
11.844881553034934
11.844082612476836
11.843291892358735
11.842509252447428
11.841734555840356
11.840967668864801
11.840208460979285
11.839456804679866
11.838712575410556
11.837975651475993
11.837245913956993
11.836523246629822
11.835807535888328
11.835098670668353
11.8343965423749
11.833701044812129
11.83301207411558
11.832329528686623
11.83165330912928
11.830983318189203
11.830319460694641
11.82966164349937
11.829009775427606
11.828363767220685
11.827723531485477
11.827088982644536
11.826460036887864
11.825836612126189
11.825218627945784
11.824606005564727
11.823998667790534
11.823396538979134
11.822799544995135
11.822207613173335
11.821620672281398
11.82103865248374
11.820461485306462
11.81988910360338
11.819321441523085
11.818758434477013
11.818200019108435
11.817646133262397
11.81709671595655
11.816551707352858
11.816011048730093
11.81547468245717
11.81494255196724
11.814414601732569
11.813890777240063
11.813371024967555
11.812855292360766
11.81234352781089
11.811835680632816
11.811331701043976
11.810831540143766
11.810335149893547
11.8098424830972
11.809353493382215
11.808868135181264
11.808386363714337
11.807908134971312
11.807433405695006

![График моделей с w = 10:](graph.png)